datasource mongo {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  birthdate      DateTime?
  comments       Comment[]
  createdAt      DateTime  @default(now())
  email          String?   @unique
  firstName      String?
  friends        User[]    @relation(name: "friends", fields: [friendsIds], references: [id])
  friendsIds     String[]  @mongo.ObjectId
  friendsList    User[]    @relation(name: "friends", fields: [friendsListIds], references: [id])
  friendsListIds String[]  @mongo.ObjectId
  gender         String?
  id             String    @id @default(auto()) @map("_id") @mongo.ObjectId
  image          String?
  lastName       String?
  password       String
  posts          Post[]    @relation(name: "PostsOnUser")
  roles          Json
  sharedPosts    Post[]    @relation(name: "sharedPosts")
  updatedAt      DateTime  @updatedAt
  username       String    @unique
}

model Post {
  comments       Comment[]
  content        String?
  createdAt      DateTime  @default(now())
  dislikes       Int?
  id             String    @id @default(auto()) @map("_id") @mongo.ObjectId
  likes          Int?
  sharingUsers   User?     @relation(name: "sharedPosts", fields: [sharingUsersId], references: [id])
  sharingUsersId String?
  topic          String?
  updatedAt      DateTime  @updatedAt
  user           User?     @relation(name: "PostsOnUser", fields: [userId], references: [id])
  userId         String?
}

model Comment {
  content      String?
  createdAt    DateTime @default(now())
  id           String   @id @default(auto()) @map("_id") @mongo.ObjectId
  parentPost   Post?    @relation(fields: [parentPostId], references: [id])
  parentPostId String?
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
}
